[{"title":"系统分析第九周作业","url":"/2019/04/29/系统分析第九周作业/","content":"<br/>\n<font size=4 face=\"黑体\"><b>使用类图，分别对 Asg_RH 文档中 Make Reservation 用例以及 Payment 用例开展领域建模。然后，根据上述模型，给出建议的数据表以及主要字段，特别是主键和外键</b></font><br/>\n<font size=4 face=\"黑体\">\n1. Make Reservation\n&emsp;&emsp;![](1.png)\n\n\t```\n\tCustomer(ID/KEY, name, address)\n\tReservationList(ID/KEY, CID/FKEY)\n\tReservationItem(ID/KEY, LID/FKEY, RID/FKEY, checkindate, checkoutdate, numofnights, numofrooms, numofadults, numofchildren, ageofchildren, price)\n\tRoom(ID/KEY, DID/FKEY, HID/FKEY, type, availability)\n\tRoomDescription(ID/KEY, detail, price)\n\tHotel(ID/KEY, CID/FKEY, name, address)\n\tCity(ID/KEY, name)\n\t```\n\n2. Payment\n&emsp;&emsp;![](2.png)\n\n\t```\n\tReservationItem(ID/KEY, LID/FKEY, RID/FKEY, checkindate, checkoutdate, numofnights, numofrooms, numofadults, numofchildren, ageofchildren, price)\n\tPaymentItem(ID/KEY, RID/FKEY, CardID/FKEY, price)\n\tCreditCard(ID/KEY, number, securitycode, expirydate)\n\tCreditCardOwner(ID/KEY, CardID/FKEY, TID/FKEY, CountryID/FKEY, CityID/FKEY, firstname, lastname, address1, address2)\n\tTitle(ID/KEY, details)\n\tCity(ID/KEY, name)\n\tCountry(ID/KEY, name)\n\t```\n\t\n</font>\n<font size=4 face=\"黑体\"><b>使用 UML State Model，对每个订单对象生命周期建模\n建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。\n建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</b></font>\n<font size=4 face=\"黑体\">\n参考携程网\n![](3.png)\n</font>\n\n","tags":["系统分析作业"]},{"title":"系统分析第七周作业","url":"/2019/04/29/系统分析第七周作业/"},{"title":"系统分析第六周作业","url":"/2019/04/17/系统分析第六周作业/","content":"## 简答题\n1. <b>用例的概念</b>\n&emsp;&emsp;&emsp;用例是一个和项目是否成功有关的场景的集合，这些场景描述了使用者来使用系统来达到目的的过程。用例是文档，而不是图表，所以，用例建模住主要是书写文档，而不是画图。\n\n2. <b>用例和场景的关系？什么是主场景或 happy path？</b>\n&emsp;&emsp;&emsp;用例是一系列场景的集合。主场景对应着系统最主要的对话，通常都是这个系统的成功的场景，它是最常用的，能够直接实现用户目标的场景。\n\n3. <b>用例有哪些形式？</b>\n&emsp;&emsp;&emsp;1. 简短格式\n&emsp;&emsp;&emsp;&emsp;&emsp;通常只包含主场景，在最开始的需求分析时候创建\n&emsp;&emsp;&emsp;2. 简便格式\n&emsp;&emsp;&emsp;&emsp;&emsp;一种不正式的格式，许多的图表涵盖了许多种场景\n&emsp;&emsp;&emsp;3. 完全格式\n&emsp;&emsp;&emsp;&emsp;&emsp;详细描述了所有的步骤和变量以及先决条件，成功保证等，在编写了简短格式的用例之后，经过迭代得到完全格式的用例\n\n4. <b>对于复杂业务，为什么编制完整用例非常难？</b>\n&emsp;&emsp;&emsp;用例结构化地，深入地展示了业务的许多细节，复杂业务的很多场景很复杂，甚至不明确，这对于编写完整的用例来说存在困难。\n\n5. <b>什么是用例图？</b>\n&emsp;&emsp;&emsp;用例图是对系统上下文的描述，可以展示系统的边界，系统的使用方法，可以作为一个交流工具概况系统及其参与者的行为等。\n\n6. <b>用例图的基本符号与元素？</b>\n![](Usecase.png)\n\n7. <b>用例图的画法与步骤</b>\n&emsp;&emsp;&emsp;1. 确定系统的边界，然后画出系统框架并写上系统名字\n&emsp;&emsp;&emsp;2. 确定参与者，主要参与者在左边，支持性参与者在右边\n&emsp;&emsp;&emsp;3. 确定参与者之间的关系\n&emsp;&emsp;&emsp;4. 根据需求识别和创作用例\n&emsp;&emsp;&emsp;5. 确认用例与参与者之间的关系\n&emsp;&emsp;&emsp;6. 将用例画在系统中，ruo涉及其他子系统，则将子系统放在右边\n\n\n8. <b>用例图给利益相关人与开发者的价值有哪些？</b>\n&emsp;&emsp;&emsp;1. 相关人员可以直观看到系统的基本框架\n&emsp;&emsp;&emsp;2. 有利于开发最后的整合\n&emsp;&emsp;&emsp;3. 方便设计人员和开发人员之间的交流\n\n## 建模练习题（用例模型）\n1. <b>选择2-3个你熟悉的类似业务的在线服务系统（或移动 APP），如定旅馆（携程、去哪儿等）、定电影票、背单词APP等，分别绘制它们用例图。并满足以下要求：\n&emsp;&emsp;&emsp;1. 请使用用户的视角，描述用户目标或系统提供的服务\n&emsp;&emsp;&emsp;2. 粒度达到子用例级别，并用 include 和 exclude 关联它们\n&emsp;&emsp;&emsp;3. 请用色彩标注出你认为创新（区别于竞争对手的）用例或子用例\n&emsp;&emsp;&emsp;4. 尽可能识别外部系统和服务</b>\n![](Ctrip.png)\n![](Maoyan.png)\n\n2. <b>然后，回答下列问题：\n&emsp;&emsp;&emsp;1. 为什么相似系统的用例图是相似的？</b>\n&emsp;&emsp;&emsp;&emsp;因为相似系统的业务是相似的，所以用例图也是相似的。\n&emsp;&emsp;&emsp;<b>2. 如果是定旅馆业务，请对比 Asg_RH 用例图，简述如何利用不同时代、不同地区产品的用例图，展现、突出创新业务和技术</b>\n&emsp;&emsp;&emsp;&emsp;可以参考早期的产品，发掘它的优点加以借鉴，同时找到用户使用该早期产品时体验不好的地方以及它的用例图不合理的地方，然后结合市场调研的结果，在我们的产品上进行改进创新，同时通过一次次迭代，完善我们的产品的创新点。\n&emsp;&emsp;&emsp;<b>3. 如何利用用例图定位创新思路（业务创新、或技术创新、或商业模式创新）在系统中的作用</b>\n&emsp;&emsp;&emsp;&emsp;用不同颜色的图例来突出创新点\n&emsp;&emsp;&emsp;<b>4. 请使用 SCRUM 方法，选择一个用例图，编制某定旅馆开发的需求（backlog）开发计划表</b>\n\n| ID | Title | Imp | Est | How to Demo |\n| :-----: | :------: | :------: | :-----: | :----- |\n| 1 | 查找酒店 | 10 | 30 | 根据位置查找酒店  |\n| 2 | 预订酒店 | 30 | 20 | 预定需要的酒店 |\n| 3 | 查询    | 10 | 20 | 根据名字，位置等信息查找酒店 |\n| 4 | 支付    | 20 | 10 | 支付订单 |\n| 5 | 管理账单 | 15 | 15 | 管理已支付订单 |\n| 6 | 管理账户 | 20 | 10 | 管理自己的账户信息 |\n\n&emsp;&emsp;&emsp;5. <b>根据任务4，参考 使用用例点估算软件成本，给出项目用例点的估算</b>\n\n| 用例 | 事务 | 计算 | 权重 |\n| :-----: | :------: | :------: | :-----: | :----- |\n| 查找酒店 | 1 | 2 | 平均  |\n| 预订酒店 | 4 | 5 | 重要 |\n| 查询    | 5 | 10 | 重要 |\n| 支付    | 2 | 5 | 简单 |\n| 管理账单 | 3 | 5 | 重要 |\n| 管理账户 | 2 | 5 | 简单 |\n\n\n","tags":["系统分析作业"]},{"title":"系统分析第三周作业","url":"/2019/04/01/系统分析第三周作业/","content":"## 简答题\n1. <font size=4 face=\"黑体\"><b>简述瀑布模型，增量模型，螺旋模型（含原型方法），并分析优缺点</b></font>\n<font size=4 face=\"黑体\">\n  &emsp;&emsp;<b>1. 瀑布模型</b>\n  &emsp;&emsp;&emsp;&emsp;优点：\n&emsp;&emsp;&emsp;&emsp;定义了软件开发基本流程与活动，包括创意阶段，描述问题，市场，关键技术等\n&emsp;&emsp;&emsp;&emsp;缺点：\n&emsp;&emsp;&emsp;&emsp;1. 依赖问题，后面的工作依赖于前一阶段的工作\n&emsp;&emsp;&emsp;&emsp;2. 容错问题，后期开发测试发现需求有问题需要推倒重来，这个工作量难以接受\n&emsp;&emsp;&emsp;&emsp;3. 资源调配问题，不同团队，不同项目的知识技能需求不同，人员数量要求不同\n&emsp;&emsp;&emsp;&emsp;总得来说，瀑布模型容易导致项目延期，项目不可控\n  &emsp;&emsp;<b>2. 增量模型</b>\n  &emsp;&emsp;&emsp;&emsp;优点：\n  &emsp;&emsp;&emsp;&emsp;1. 人员配置灵活\n  &emsp;&emsp;&emsp;&emsp;2. 降低系统失败的风险\n  &emsp;&emsp;&emsp;&emsp;3. 可以给客户一个包含部分功能的版本，增强客户对该项目的信心\n  &emsp;&emsp;&emsp;&emsp;缺点：\n  &emsp;&emsp;&emsp;&emsp;1. 难以确定所有的基本业务服务\n  &emsp;&emsp;&emsp;&emsp;2. 并行开发构件存在不能集成的可能性\n  &emsp;&emsp;<b>3. 螺旋模型（含原型方法）</b>\n  &emsp;&emsp;&emsp;&emsp;优点：\n  &emsp;&emsp;&emsp;&emsp;1. 客户可以跟进项目开发，一方面有助于客户了解项目的进度，另一方面有助于\n  &emsp;&emsp;&emsp;&emsp;&emsp;开发人员和客户的沟通\n  &emsp;&emsp;&emsp;&emsp;2. 设计灵活，可以在项目的各个阶段进行变更\n  &emsp;&emsp;&emsp;&emsp;3. 成本计算变得更加容易\n  &emsp;&emsp;&emsp;&emsp;缺点：\n  &emsp;&emsp;&emsp;&emsp;1. 过多的迭代可能会拖延发布的时间\n  &emsp;&emsp;&emsp;&emsp;2. 不适合应用于小规模的软件开发\n  &emsp;&emsp;&emsp;&emsp;3. 错误的风险分析会带来更大的风险，所以要求相当丰富的风险评估知识\n</font><br/>\n2. <font size=4 face=\"黑体\"><b>简述统一过程的三大特点，与面向对象的方法有什么关系</b></font>\n   <font size=4 face=\"黑体\">\n  &emsp;&emsp;1. 以架构为中心\n  &emsp;&emsp;2. 迭代式增量开发\n  &emsp;&emsp;3. 用例驱动\n  &emsp;&emsp;与面向对象的关系：\n  &emsp;&emsp;&emsp;统一过程面向功能设计接口，基于设计的类进行编程，这是面向对象编程的特征\n  </font><br/>\n\n3. <font size=4 face=\"黑体\"><b>简述同意过程4个阶段的划分准则是什么？每个阶段的关键的里程碑是是什么？</b></font>\n  <font size=4 face=\"黑体\">\n  &emsp;&emsp;1. 初始阶段：大体的猜想，业务案例，范围以及模糊的评估\n  &emsp;&emsp;&emsp;&emsp;里程碑：生命周期目标里程碑\n  &emsp;&emsp;2. 细化阶段：分析问题，确定大多数的需求和范围，进行更为实际的评估\n  &emsp;&emsp;&emsp;&emsp;里程碑：生命周期体系里程碑\n  &emsp;&emsp;3. 构建阶段：将剩余的构建和功能开发并整合为一个软件产品\n  &emsp;&emsp;&emsp;&emsp;里程碑：初始运行能力里程碑\n  &emsp;&emsp;4. 交付阶段：测试部署以及交付\n  &emsp;&emsp;&emsp;&emsp;产品发布里程碑\n  &emsp;&emsp;每一个阶段结束于一个里程碑，在结尾进行一次评估，判断是否合格可以进入下一个\n  &emsp;&emsp;阶段\n  </font><br/>\n\n4. <font size=4 face=\"黑体\"><b>软件企业为什么能按固定节奏生产，固定周期发布软件产品？它给企业项目管理带来哪些好处？</b></font>\n  <font size=4 face=\"黑体\">\n  &emsp;&emsp;通过统一过程，在开发产品之前，企业可以将开发的过程划分为若干个阶段。在每一\n  &emsp;&emsp;个阶段的结尾进行评估，以判断是否合格可以进入下一个阶段。通过这样将过程划分\n  &emsp;&emsp;为阶段，阶段之间设置里程碑，企业可以准确掌握开发的时间以及完成的时间，从而\n  &emsp;&emsp;可以按照固定的节奏进行生产，发布产品。\n  &emsp;&emsp;企业可以按照固定节奏生产，有利于企业保持活力，跟上市场的变化，变得更加有竞\n  &emsp;&emsp;争力。\n  </font>","tags":["系统分析作业"]},{"title":"系统分析第二周作业","url":"/2019/03/18/系统分析第二周作业/","content":"\n## 简答题\n\n1. <font size=4 face=\"黑体\"><b>用简短的语言给出对分析、设计的理解</b><br/>\n   &emsp;&emsp;分析：分析强调对问题和需求的观察，而不是解决方法<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;分析的内容包括以下几方面内容：<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1. 抽象出问题的本质<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2. 在分析中不要想着编程语言的概念，应该使用所要分析的问题的语言<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;3. 使用问题的抽象，问题的表现，问题之间的相互作用来对问题进行概念上<br/>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;的建模<br/>\n   &emsp;&emsp;设计：设计强调对问题的一个概念性的解决方法，包括软件和硬件上的，但是不包括<br/>&emsp;&emsp;&emsp;&emsp;&emsp;具体的实现方法<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;设计的内容包括以下几方面内容：<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1. 为系统设计结构框架<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2. 将问题的抽象映射成类<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;3. 将这些对象和问题的表现结合，设计类间的相互作用<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;4. 为实现设计一个软件抽象<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;5. 为类设计一个层级方便管理<br/>\n   </font>\n2. <font size=4 face=\"黑体\"><b>用一句话描述面向对象的分析与设计的优势</b><br/>\n   &emsp;&emsp;面向对象的分析的优势：问题的分析者没必要很熟悉编程语言，降低了问题分析和实<br/>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;现之间的沟通成本，可以使用一套通用的符号来进行交流<br/>\n   &emsp;&emsp;面向对象的设计的优势：面向对象的设计和面向对象的分析使用相同的建模符号，在<br/>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;设计上可以实现一致性。不同是，设计着重于解决，分析着<br/>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;重于问题。\n   </font>\n3. <font size=4 face=\"黑体\"><b>简述 UML（统一建模语言）的作用。考试考哪些图？</b><br/>\n   &emsp;&emsp;UML的作用是：可视化分析和设计的结果<br/>\n   &emsp;&emsp;考试考的图：<br/>\n   &emsp;&emsp;&emsp;1. 用例图：从用户角度来分析功能和执行者<br/>\n   &emsp;&emsp;&emsp;2. 静态图：系统的静态结构<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;1) 类图&emsp;：概念及其关系<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;2) 对象图：对象活跃的时间，状态以及对象之间的关系<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;3) 包图&emsp;：描述系统的分解结构<br/>\n   &emsp;&emsp;&emsp;3. 行为图：系统的动态行为<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;1) 交互图：描述对象间的信息传递<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a. 顺序图：强调对象间传递信息的时序关系<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b. 合作图：强调对象之间的动态协作关系<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;2) 状态图：对象的动态行为<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;3) 活动图：描述系统为了完成功能所需要进行的操作序列<br/>\n   &emsp;&emsp;&emsp;4. 实现图：描述系统的组成和分布情况<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;1) 构件图：组成部件及其关系<br/>\n   &emsp;&emsp;&emsp;&emsp;&emsp;2) 部署图：物理体系结构及软件单元的对应关系<br/>\n   </font>\n4. <font size=4 face=\"黑体\"><b>从软件本质的角度，解释软件范围（需求）控制的可行性</b><br/>\n   &emsp;&emsp;软件范围控制，指的是从所得到的需求中选取一部分需求进行实现。一般，客户和开<br/>&emsp;&emsp;发者对于其中20%的需求是明确的，而80%的需求是模糊的，所以进行软件范围控<br/>&emsp;&emsp;制，实现客户感兴趣的目标是可行的。另外，由于软件的复杂性，不一致性，不可见<br/>&emsp;&emsp;性和可变性，软件范围多数情况下都是模糊的，假如不进行软件范围限制，则可能超<br/>&emsp;&emsp;出工期，超出预算，质量低下，从而导致软件危机。所以，进行软件范围控制是一个<br/>&emsp;&emsp;软件项目的重中之重。\n   </font>\n\n## 项目管理实践\n![](Kanban.png)\n## UML绘图工具联系\n<font size=4 face=\"黑体\">\n&emsp;《UML和模式应用》P7 图1-5\n</font>\n![](UMLet.png)","tags":["系统分析作业"]},{"title":"系统分析第一周作业","url":"/2019/03/15/系统分析第一周作业/","content":"\n1. <font size=4 face=\"黑体\"><b>软件工程的定义</b>\n   &emsp;&emsp;1. 将系统化的，规范的，可度量的方法应用于软件的开发，运行和维护，即，将工程化的方法应用于软件\n   &emsp;&emsp;2. 对 1 中所说的方法的研究\n   </font>\n2. <font size=4 face=\"黑体\"><b>解释导致software crisis本质原因、表现，述说克服软件危机的方法</b>\n  &emsp;&emsp;1. 软件危机的本质原因：\n  &emsp;&emsp;&emsp;&emsp;1) 软件的规模越来越大，结构越来越复杂\n  &emsp;&emsp;&emsp;&emsp;2) 软件开发管理困难而复杂\n  &emsp;&emsp;&emsp;&emsp;3) 软件开发费用不断增加\n  &emsp;&emsp;&emsp;&emsp;4) 软件开发技术落后\n  &emsp;&emsp;&emsp;&emsp;5) 生产方式落后\n  &emsp;&emsp;&emsp;&emsp;6) 开发工具落后，生产效率提高缓慢\n  &emsp;&emsp;本质原因是计算能力的发展，软件规模的复杂化以及编程的困难性和开发人员的技术能力不够，开发工具的落后以及开发效率的低下之间的矛盾\n  &emsp;&emsp;2. 软件危机的表现\n  &emsp;&emsp;&emsp;&emsp;1) 经费预算经常突破，完成时间一再拖延\n  &emsp;&emsp;&emsp;&emsp;2) 开发的软件不能满足用户的要求\n  &emsp;&emsp;&emsp;&emsp;3) 开发的软件的可维护性差，开发过程中没有统一的规范，开发效率低下\n  &emsp;&emsp;&emsp;&emsp;4) 软件的可靠性差\n  &emsp;&emsp;3. 克服软件危机的方法\n  &emsp;&emsp;&emsp;&emsp;只有通过系统化的，与时俱进的软件工程方法，才可以规避软件危机\n   </font>\n3. <font size=4 face=\"黑体\"><b>SWEBoK的15个知识域</b>\n   &emsp;&emsp;1&ensp;. 软件需求\n   &emsp;&emsp;2&ensp;. 软件设计\n   &emsp;&emsp;3&ensp;. 软件构件\n   &emsp;&emsp;4&ensp;. 软件测试\n   &emsp;&emsp;5&ensp;. 软件维护\n   &emsp;&emsp;6&ensp;. 软件配置管理\n   &emsp;&emsp;7&ensp;. 软件工程管理\n   &emsp;&emsp;8&ensp;. 软件工程过程\n   &emsp;&emsp;9&ensp;. 软件工程模型和方法\n   &emsp;&emsp;10. 软件质量\n   &emsp;&emsp;11. 软件工程专业实践\n   &emsp;&emsp;12. 软件工程经济学\n   &emsp;&emsp;13. 计算基础\n   &emsp;&emsp;14. 数学基础\n   &emsp;&emsp;15. 工程基础\n   </font>\n4. <font size=4 face=\"黑体\"><b>简单解释 CMMI 的五个级别</b>\n   &emsp;&emsp;1. Level1 - Initial\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;无序，自发产生模式\n   &emsp;&emsp;2. Level2 - Managed\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;已管理，初步的管理了项目\n   &emsp;&emsp;3. Level3 - Defined\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;已定义，对项目过程，决策，风险等有了明确的定义\n   &emsp;&emsp;4. Level4 - Qualititatively Managed\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;已量化管理，能对项目进行量化分析\n   &emsp;&emsp;5. Level5 - Optimizing\n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;优化中，经过前期的积累，可以进行因果分析，决议以及绩效管理\n   </font>\n5. <font size=4 face=\"黑体\"><b>用自己语言简述CMMI</b>\n   &emsp;&emsp;CMMI，Capability Maturity Model Integration，能力成熟度模型集成的目的是为了建立一个有规律的，成熟的软件工程。改进的过程会产生质量更好的软件，使得更多的软件项目免受时间和费用超支的影响。CMMI将一个软件工程的成熟度分为了5个等级，初始状态，已管理状态，已定义状态，已量化管理状态以及优化中状态。它为软件的过程能力提供了一个阶梯式的改进框架，它基于以往软件工程的经验教训，提供了一个过程改进的框架。与SWEBoK不同的是，SWEBok不适合软件工程项目，比如小的创业公司并没有成本来进行这些管理，CMMI帮助了一个软件组织从初始走向成熟，更合适软件工程的开发过程。\n   </font>\n","tags":["系统分析作业"]},{"title":"Matplotlib动画","url":"/2019/03/14/Matplotlib动画/"},{"title":"Matplotlib多图合并显示","url":"/2019/03/14/Matplotlib多图合并显示/"},{"title":"Matplotlib画图","url":"/2019/03/14/Matplotlib画图/"},{"title":"Matplotlib的基本使用","url":"/2019/03/14/Matplotlib的基本使用/","content":"> 参考网站：[莫烦Python Matplotlib学习](https://morvanzhou.github.io/tutorials/data-manipulation/plt/)\n\n- <font size=5 face=\"黑体\"><b>画简单的线条</b></font><br>\n  <font size=4 face=\"黑体\">画出简单的函数 $ y = 2*x + 1 $</font>\n  ``` python\n  import numpy as np\n  import matplotlib.pylot as plt\n  \n  x = np.linespace(-1, 1, 50) # 主要是用来产生一组x数据\n  y = 2*x + 1 # 函数为 y = 2*x + 1\n  plt.figure() # 产生一个新窗口\n  plt.plot(x, y) # 画出y = 2*x + 1的图像\n  plt.show() # 显示结果\n  ```\n  ![](1.png)\n- <font size=5 face=\"黑体\"><b>figure和plot的简单参数</b></font><br/>\n  <font size=4 face=\"黑体\">仍然使用上面那个函数 $ y = 2\\*x + 1 $</font>\n  ``` python\n  plt.figure(num = 1, figsize=(8,5)) # 定义窗口编号为1，大小为(8,5)\n  plt.plot(x, y, color='red', linewidth=1.0, linestyle='--') # 颜色为红色，线宽度为1.0，曲线类型为虚线\n  plt.show()\n  ```\n  ![](2.png)\n- <font size=5 face=\"黑体\"><b>设置坐标轴</b></font><br/>\n  <font size=4 face=\"黑体\">1. 限制坐标轴的范围</font>\n  \n  ``` python\n  plt.xlim((-1, 2)) # 修改x轴\n  plt.ylim((-2, 3)) # 修改y轴\n  ```\n  ![](3.png)<br/>\n  <font size=4 face=\"黑体\">2. 添加标签</font>\n  \n  ``` python\n  plt.xlabel('x label')\n  plt.ylabel('y label')\n  ```\n  ![](4.png)<br/>\n  <font size=4 face=\"黑体\">3. 自定义坐标轴的单位间隔以及内容</font>\n  <ul>\n    <li>使用新的区间以及单位间隔来替换</li>\n  </ul>\n  ``` python\n  new_tick = np.linspace(-2, 4, 5) # 新建一个区间[-2,4]，一共显示5个坐标\n  plt.xticks(new_tick)\n  ```\n  ![](5.png)\n  <ul>\n    <li>自定义任意间隔和内容的坐标轴</li>\n  </ul>\n  \n  ``` python\n  # [-2, -1.8, -1, 1.22, 3]表示在坐标轴上显示的位置\n  # [r'$really\\ bad$', r'$bad$', r'$normal$', r'$really\\ good$']表示对应位置显示的内容\n  # 这里用了正则表达式，可以用来表示更多内容以及更多种数学符号\n  plt.yticks([-2, -1.8, -1, 1.22, 3], [r'$really\\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\\ good$'])\n  ```\n  ![](6.png)<br/>\n  <font size=4 face=\"黑体\">4. 去掉不想要的边框<br/>$ \\ \\ \\ \\  $例如，这里我们不想要上面和右边这两条边框，那么怎么去掉？</font>\n  ![](7.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $解决方法就是：将不想要的边框的颜色设置为'none'</font>\n  \n  ``` python\n  ax = plt.gca() # 获取当前的坐标轴的信息\n  ax.spines['right'].set_color('none') # 设置右边的边框\n  ax.spines['top'].set_color('none')   # 设置上面的边框\n  plt.show()\n  ```\n  ![](8.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $可以看到，上面和右边那两个边框被去掉了</font>\n  <font size=4 face=\"黑体\">5. 调整坐标轴</font>\n  \n  ``` python\n  # 设置x坐标\n  ax.xaxis.set_ticks_position('bottom') # 设置底部的x坐标\n  ax.spines['bottom'].set_position(('data', 0)) # 将x坐标移动到y=0的位置\n  ```\n  ![](9.png)\n  \n  ``` python\n  ax.yaxis.set_ticks_position('left') # 设置坐标的y坐标轴\n  ax.spines['left'].set_position(('data', 0)) # 将y坐标轴移动到x=0的位置\n  ```\n  ![](10.png)\n- <font size=5 face=\"黑体\"><b>Legend图例</b></font>\n  <font size=4 face=\"黑体\">\n  为了方便说明，这里我们画2条曲线，一条函数为$ y = 2*x + 1 $，另外一条为$ y = x^2 $，绘制方法在前面已经说明了，如下：<br/>\n  ![](11.png)<br/>\n  <font size=4 face=\"黑体\">下面我们想要添加图例来标注这两条线段</font>\n  \n  ``` python\n  # 需要获取红色线段和抛物线的对象\n  # a, = function() 表示function()会返回多个返回值，但是只拿第一个赋值给a\n  # 特别注意这里的label，是可以显示在legend上面的\n  line,  = plt.plot(x, y1, color='red', linewidth=1.0, linestyle='--', label='red line')\n  circle, = plt.plot(x, y2, color='blue', linewidth=2.0, label='blue line')\n  # 然后根据label自动生成图例\n  plt.legend(loc='upper right')\n  ```\n  ![](12.png)\n  <font>假如我们还想对图例进行进一步自定义的控制，如多个线有label，但是我只想显示其中一两条，然而自动生成的图例会生成所有带label的线的图例，而且，还可以根据自己的喜好重新命名而不用理会原有的label\n  </font>\n  \n  ``` python\n  # handlers：需要添加进去图例的线段的实例\n  # labels：这些实例对应的label，自定义的\n  # loc：位置，这里是右上方\n  plt.legend(handles=[line, circle], labels=['my red line', 'my_blue_line'], loc='upper right')\n  ```\n  ![](13.png)<br/>\n  <font size=4 face=\"黑体\">\n  另外，loc参数如下：\n  其中，'best'代表自动分配最佳位置，尽量不遮挡原图形\n  <ul>\n   <li>'best'</li>\n   <li>'upper right'</li>\n   <li>'upper left'</li>\n   <li>'lower left'</li>\n   <li>'lower right'</li>\n   <li>'right'</li>\n   <li>'center left'</li>\n   <li>'center right'</li>\n   <li>'lower center'</li>\n   <li>'upper center'</li>\n   <li>'center'</li>\n </ul>\n  </font>\n- <font size=5 face=\"黑体\"><b>Annotation标注</b></font>\n  <font size=4 face=\"黑体\">原始图像：</font>\n  ![](14.png)<br/>\n  <font size=4 face=\"黑体\">1. 画垂直的虚线</font>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $比如，这里我们想做一个如下的标注：</font>\n  ![](15.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $我们可以看到，这种标记其实还是用了前面的知识，这里我们需要一个垂直的虚线以及$ \\ \\ \\ \\  $在直线上的一个点，实现如下：</font>\n  \n  ``` python\n  x0 = 1\n  y0 = 2*x0 + 1\n  plt.plot([x0, x0], [0, y0], 'k--', linewidth=2.5) # 画线\n  # 表示x的范围从x0~x0；y的范围为0~y0；'k--'表示黑色的虚线，k为黑色，--为虚线；\n  plt.scatter(1, 1*2+1, s=50) # 画点\n  ```\n  <br/>\n  <font size=4 face=\"黑体\">2. 添加标注的两种方法</font>\n  \t<font size=4 face=\"黑体\">$ \\ \\ \\ \\ $1. 使用annotate进行标注</font>\n\t``` python\n\t  plt.annotate(\n\t                    r'$2x+1=%s$'%y0, xy=(x0, y0), xycoords='data', xytext=(+30, -30), \n\t                    textcoords='offset points', fontsize=16, \n\t\t\t                  arrowprops=dict(arrowstyle='->', connectionstyle='arc3, rad=0.2')\n\t\t                   )\n\t```\n  ![](16.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $参数解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. '....'：要标注上去的text，这里是2x+1=3\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. xy=(x0,y0)：要标注的点的坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. xycoords='data'：使用我们data的坐标系\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. xytext=(-30,30)：text要展示的左上角的坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $5. textcoords='offset points'：标注文字的坐标系是根据要标注的点的位移，比如这$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $里就是那个点(x0+30, y0-30)的位置\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $6. fontsize：字体大小\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $7. arrowprops：箭头的参数。用一个字典dict来表示\n  $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  $7-1. arrowstyle：箭头的样式，'->表示箭头'\n  $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  $7-2. connectionstyle：指向标注点的样子，是直线，弧线等等。arc3表示弧线，$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $rad=0.2表示角度为0.2弧度\n  </font>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\ $2. 使用text进行标注</font>\n  ``` python\n  plt.text(-3.7, 3, r'$This\\ is\\ an\\ annotion.\\ \\mu\\sigma_i\\alpha_j$', fontdict={'size: 16', 'color': 'red'})\n  ```\n  ![](17.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $参数解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. -3.7：标注的x坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. 3：标注的y坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. text：标注的内容，正则表达式\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. text的样式，是一个字典，可以有size，color等等\n  </font><br/>\n- <font size=5 face=\"黑体\"><b>tick能见度</b></font>\n  <font size=4 face=\"黑体\">\n  首先，我们画了一个这样的图像：\n  ![](18.png)<br/>\n  可以看到图像和坐标轴之间是有遮挡的，我们可以设置x，y的透明度来使得x，y轴清晰，遮挡没那么严重\n  ``` python\n  # 通过ax.get_xticklabels()和ax.get_yticklabels()来获取x，y坐标轴的标记\n  for label in ax.get_xticklabels() + ax.get_yticklabels():\n  \tlabel.set_fontsize(12) # 设置坐标轴标记的大小\n\tlabel.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.7, zorder=2)) # 设置坐标轴标记的bbox（透明度等属性）\n  ```\n  ![](19.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $set_bbox参数中的字典内容解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. facecolor：前景色\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. edgecolor：边框颜色，这里是'None'，即无边框\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. alpha：透明度\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. zorder：层叠顺序，默认zorder为1，这里设置为2，则可以显示在线段上面\n  </font><br/>\n  </font>","tags":["python","matplotlib"]},{"title":"神经网络基础学习","url":"/2019/03/12/神经网络基础学习/","content":"> 参考博客：[【深度学习】神经网络入门](https://blog.csdn.net/lyl771857509/article/details/78990215)\n\n- <font size=5 face=\"黑体\" ><b>人工神经网络登场的前景</b></font>\n  <font size=4 face=\"黑体\">\n    假设我们有0.14，0.57，01.29，3.57，5.14这5个点，那么第7个是多少？一眼看上去好像看不出来，假如画个图拟合一下，我们可以看到：<br/>\n\t![](1.png)<br/>\n\t这样我们可以清楚看到，下一个是7。但是，计算机并不会这样画线，所以需要拟合。\n\t这就是回归（曲线拟合）问题。\n\t从最简单的方法开始：<br/>\n\t![](2.png)<br/>\n\t我们初始化一条直线 y=kx+b,然后不断旋转平移调整它，直到它的误差达到最小或者小于某个值（如0.00001）便停止旋转。这就是<b>梯度下降法（Gradient Descent）</b>\n\t计算误差，我们用的是最小二乘法。到这里，好像就解决问题了，但是上面那仅仅适用于直线。所以我们需要更加普适的方法。\n\t我们知道，误差的计算：$误差=（直线点-样本点）^2$，那么，假如我们可以找到合适的参数使得误差最小，那么就是找到了答案。\n\t可以看到，误差的函数是二次函数：<br/>\n\t![](3.png)<br/>\n\t那么，我们知道，当这个函数值最小时候，导数最小，那么我们做一个切线，我们就不断旋转这个切线，找到最小的误差。<br/>\n\t![](4.png)<br/>\n\t其中，切线每次旋转的幅度就叫做<b>学习率（learning rate）</b>，求出的切线的斜率叫做<b>导数</b>，假如要求多个曲线的导数，那其中某个曲线的斜率就叫做<b>偏导数</b>\n\t这种方法存在的问题是会陷入局部最优解，如下图：<br/>\n\t![](5.png)<br/>\n\t而且，假如维度增加，那么特征数的增加是难以接受的。假如，有一张50\\*50的灰度图，那么这个图片的维度为50*50=2500，根据公式 $特征数=\\frac{维度^2}{2}$，我们可以知道，就这么一个小小的图片，特征数达到了上百万，这明显消耗太大。\n\t所以，就有了<b>神经网络</b>的登场。<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>神经网络中的单个神经元</b></font>\n  <font size=4 face=\"黑体\">\n    下图就是单个神经元的基本数学模型：<br/>\n\t![](6.png)<br/>\n\tX1，X2这些输入代表了初始特征，w0，w1这些代表了对应的权重，然后将特征加权求和：\n\t$ res = 1\\*w0 + X1\\*w1 + X2\\*w2 + X3\\*w3 $\n\t然后还可以看到下一步，将加权求和的结果送入激活函数，激活函数主要有以下几个：\n\t<ol>\n\t  <li><b>Purelin</b>：<font size=4>$y = x$</font></li>\n\t  <li><b>Sigmoid</b>：<font size=4>$y = logsig(x) = \\frac{1}{1+e^(-x)}$</font></li>\n\t  <li><b>Tansig </b>：<font size=4>$y = tansig(x) = \\frac{e^x - e^(-x)}{e^x + e^(-x)}$</font></li>\n\t</ol>\n\t后两个函数的图像如下：<br/>\n\t![](7.png)<br/>\n\t可以看到，logsig的范围为0 ~ 1，tansig的范围为-1 ~ 1<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>神经网络</b></font>\n  <font size=4 face=\"黑体\">\n    先上几张简单的神经网络的结构图：<br/>\n\t![](8.png)<br/>\n\t<ul>\n\t  <li> 左边蓝色的，是<b>输入层</b>\n\t  <li> 中间橙色的，是<b>隐藏层</b>，不管多少层，都是隐藏层\n\t  <li> 右边绿色的，是<b>输出层</b>\n\t</ul>\n\t在这些节点之间的连接线上，是有权重的，计算方法就是和前面一样的加权求和以及激活。\n\t从输入层通过计算传播到隐藏层，再到输出层，最后输出层的结果和样本值比较，得到误差，这个过程就叫做<b>前向传播</b>。\n\t但是，假如采用前面所述的梯度下降法，不断修改参数使得误差最小，那么，在神经网络中，需要修改每条连接线上的权重参数，这是不容易的。<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>BP神经网络</b></font>\n  <font size=4 face=\"黑体\">\n    BP反向传播算法的基本思想：利用前向传播最后输出的结果，计算得到误差。然后计算误差的偏导数，再和前面的隐藏层加权求和，如此一层层向后传递，最后到达输入层，用计算出来的偏导数来更新权重。\n\t为了和前向传播的误差区分，这里使用残差来表示误差的偏导数。\n\t残差的计算：\n\t<ol>\n\t  <li>输出层 -> 隐藏层：$ 残差 = -(输出值 - 样本值)\\*激活函数的导数 $</li>\n\t  <li>隐藏层 -> 隐藏层：$ 残差 = -(右层每个节点的残差加权求和)\\*激活函数的导数 $</li>\n\t</ol>\n\t对于这个激活函数的导数，对于以下几个我们常用的激活函数：\n\t<ol>\n\t  <li>Pureline函数：$ Pureline'(x) = 1 $</li>\n\t  <li>Sigmod函数：$ Sigmod'(x) = Sigmod(x)\\*(1 - Sigmod(x)) $</li>\n\t  <li>Tansig函数：$ tansig'(x) = 1 - tansig(x)^2 $</li>\n\t</ol>\n\t残差计算完之后，就可以更新权重了\n\t<ul>\n\t  <li>输入层：权重改变量 = 当前节点的激活函数值\\*右层对应节点的残差\\*学习率</li>\n\t  <li>隐藏层：权重改变量 = 输入值\\*右层节点的残差\\*学习率</li>\n\t  <li>偏移值：右层对应节点的残差\\*学习率</li>\n\t</ul>\n\t计算举例：\n\t![](example_1.png)\n\t![](example_2.png)\n\t![](example_3.png)\n\t![](example_4.png)\n\t![](example_5.png)\n\t![](example_6.png)\n\t![](example_7.png)\n  </font>","tags":["机器学习","人工智能","入门知识","数学相关"],"categories":["机器学习"]}]