[{"title":"Matplotlib动画","url":"/2019/03/14/Matplotlib动画/"},{"title":"Matplotlib多图合并显示","url":"/2019/03/14/Matplotlib多图合并显示/"},{"title":"Matplotlib画图","url":"/2019/03/14/Matplotlib画图/"},{"title":"Matplotlib的基本使用","url":"/2019/03/14/Matplotlib的基本使用/","content":"> 参考网站：[莫烦Python Matplotlib学习](https://morvanzhou.github.io/tutorials/data-manipulation/plt/)\n\n- <font size=5 face=\"黑体\"><b>画简单的线条</b></font><br>\n  <font size=4 face=\"黑体\">画出简单的函数 $ y = 2*x + 1 $</font>\n  ``` python\n  import numpy as np\n  import matplotlib.pylot as plt\n  \n  x = np.linespace(-1, 1, 50) # 主要是用来产生一组x数据\n  y = 2*x + 1 # 函数为 y = 2*x + 1\n  plt.figure() # 产生一个新窗口\n  plt.plot(x, y) # 画出y = 2*x + 1的图像\n  plt.show() # 显示结果\n  ```\n  ![](1.png)\n- <font size=5 face=\"黑体\"><b>figure和plot的简单参数</b></font><br/>\n  <font size=4 face=\"黑体\">仍然使用上面那个函数 $ y = 2\\*x + 1 $</font>\n  ``` python\n  plt.figure(num = 1, figsize=(8,5)) # 定义窗口编号为1，大小为(8,5)\n  plt.plot(x, y, color='red', linewidth=1.0, linestyle='--') # 颜色为红色，线宽度为1.0，曲线类型为虚线\n  plt.show()\n  ```\n  ![](2.png)\n- <font size=5 face=\"黑体\"><b>设置坐标轴</b></font><br/>\n  <font size=4 face=\"黑体\">1. 限制坐标轴的范围</font>\n  \n  ``` python\n  plt.xlim((-1, 2)) # 修改x轴\n  plt.ylim((-2, 3)) # 修改y轴\n  ```\n  ![](3.png)<br/>\n  <font size=4 face=\"黑体\">2. 添加标签</font>\n  \n  ``` python\n  plt.xlabel('x label')\n  plt.ylabel('y label')\n  ```\n  ![](4.png)<br/>\n  <font size=4 face=\"黑体\">3. 自定义坐标轴的单位间隔以及内容</font>\n  <ul>\n    <li>使用新的区间以及单位间隔来替换</li>\n  </ul>\n  ``` python\n  new_tick = np.linspace(-2, 4, 5) # 新建一个区间[-2,4]，一共显示5个坐标\n  plt.xticks(new_tick)\n  ```\n  ![](5.png)\n  <ul>\n    <li>自定义任意间隔和内容的坐标轴</li>\n  </ul>\n  \n  ``` python\n  # [-2, -1.8, -1, 1.22, 3]表示在坐标轴上显示的位置\n  # [r'$really\\ bad$', r'$bad$', r'$normal$', r'$really\\ good$']表示对应位置显示的内容\n  # 这里用了正则表达式，可以用来表示更多内容以及更多种数学符号\n  plt.yticks([-2, -1.8, -1, 1.22, 3], [r'$really\\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\\ good$'])\n  ```\n  ![](6.png)<br/>\n  <font size=4 face=\"黑体\">4. 去掉不想要的边框<br/>$ \\ \\ \\ \\  $例如，这里我们不想要上面和右边这两条边框，那么怎么去掉？</font>\n  ![](7.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $解决方法就是：将不想要的边框的颜色设置为'none'</font>\n  \n  ``` python\n  ax = plt.gca() # 获取当前的坐标轴的信息\n  ax.spines['right'].set_color('none') # 设置右边的边框\n  ax.spines['top'].set_color('none')   # 设置上面的边框\n  plt.show()\n  ```\n  ![](8.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $可以看到，上面和右边那两个边框被去掉了</font>\n  <font size=4 face=\"黑体\">5. 调整坐标轴</font>\n  \n  ``` python\n  # 设置x坐标\n  ax.xaxis.set_ticks_position('bottom') # 设置底部的x坐标\n  ax.spines['bottom'].set_position(('data', 0)) # 将x坐标移动到y=0的位置\n  ```\n  ![](9.png)\n  \n  ``` python\n  ax.yaxis.set_ticks_position('left') # 设置坐标的y坐标轴\n  ax.spines['left'].set_position(('data', 0)) # 将y坐标轴移动到x=0的位置\n  ```\n  ![](10.png)\n- <font size=5 face=\"黑体\"><b>Legend图例</b></font>\n  <font size=4 face=\"黑体\">\n  为了方便说明，这里我们画2条曲线，一条函数为$ y = 2*x + 1 $，另外一条为$ y = x^2 $，绘制方法在前面已经说明了，如下：<br/>\n  ![](11.png)<br/>\n  <font size=4 face=\"黑体\">下面我们想要添加图例来标注这两条线段</font>\n  \n  ``` python\n  # 需要获取红色线段和抛物线的对象\n  # a, = function() 表示function()会返回多个返回值，但是只拿第一个赋值给a\n  # 特别注意这里的label，是可以显示在legend上面的\n  line,  = plt.plot(x, y1, color='red', linewidth=1.0, linestyle='--', label='red line')\n  circle, = plt.plot(x, y2, color='blue', linewidth=2.0, label='blue line')\n  # 然后根据label自动生成图例\n  plt.legend(loc='upper right')\n  ```\n  ![](12.png)\n  <font>假如我们还想对图例进行进一步自定义的控制，如多个线有label，但是我只想显示其中一两条，然而自动生成的图例会生成所有带label的线的图例，而且，还可以根据自己的喜好重新命名而不用理会原有的label\n  </font>\n  \n  ``` python\n  # handlers：需要添加进去图例的线段的实例\n  # labels：这些实例对应的label，自定义的\n  # loc：位置，这里是右上方\n  plt.legend(handles=[line, circle], labels=['my red line', 'my_blue_line'], loc='upper right')\n  ```\n  ![](13.png)<br/>\n  <font size=4 face=\"黑体\">\n  另外，loc参数如下：\n  其中，'best'代表自动分配最佳位置，尽量不遮挡原图形\n  <ul>\n   <li>'best'</li>\n   <li>'upper right'</li>\n   <li>'upper left'</li>\n   <li>'lower left'</li>\n   <li>'lower right'</li>\n   <li>'right'</li>\n   <li>'center left'</li>\n   <li>'center right'</li>\n   <li>'lower center'</li>\n   <li>'upper center'</li>\n   <li>'center'</li>\n </ul>\n  </font>\n- <font size=5 face=\"黑体\"><b>Annotation标注</b></font>\n  <font size=4 face=\"黑体\">原始图像：</font>\n  ![](14.png)<br/>\n  <font size=4 face=\"黑体\">1. 画垂直的虚线</font>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $比如，这里我们想做一个如下的标注：</font>\n  ![](15.png)<br/>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\  $我们可以看到，这种标记其实还是用了前面的知识，这里我们需要一个垂直的虚线以及$ \\ \\ \\ \\  $在直线上的一个点，实现如下：</font>\n  \n  ``` python\n  x0 = 1\n  y0 = 2*x0 + 1\n  plt.plot([x0, x0], [0, y0], 'k--', linewidth=2.5) # 画线\n  # 表示x的范围从x0~x0；y的范围为0~y0；'k--'表示黑色的虚线，k为黑色，--为虚线；\n  plt.scatter(1, 1*2+1, s=50) # 画点\n  ```\n  <br/>\n  <font size=4 face=\"黑体\">2. 添加标注的两种方法</font>\n  \t<font size=4 face=\"黑体\">$ \\ \\ \\ \\ $1. 使用annotate进行标注</font>\n\t``` python\n\t  plt.annotate(\n\t                    r'$2x+1=%s$'%y0, xy=(x0, y0), xycoords='data', xytext=(+30, -30), \n\t                    textcoords='offset points', fontsize=16, \n\t\t\t                  arrowprops=dict(arrowstyle='->', connectionstyle='arc3, rad=0.2')\n\t\t                   )\n\t```\n  ![](16.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $参数解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. '....'：要标注上去的text，这里是2x+1=3\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. xy=(x0,y0)：要标注的点的坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. xycoords='data'：使用我们data的坐标系\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. xytext=(-30,30)：text要展示的左上角的坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $5. textcoords='offset points'：标注文字的坐标系是根据要标注的点的位移，比如这$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $里就是那个点(x0+30, y0-30)的位置\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $6. fontsize：字体大小\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $7. arrowprops：箭头的参数。用一个字典dict来表示\n  $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  $7-1. arrowstyle：箭头的样式，'->表示箭头'\n  $ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\  $7-2. connectionstyle：指向标注点的样子，是直线，弧线等等。arc3表示弧线，$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $rad=0.2表示角度为0.2弧度\n  </font>\n  <font size=4 face=\"黑体\">$ \\ \\ \\ \\ $2. 使用text进行标注</font>\n  ``` python\n  plt.text(-3.7, 3, r'$This\\ is\\ an\\ annotion.\\ \\mu\\sigma_i\\alpha_j$', fontdict={'size: 16', 'color': 'red'})\n  ```\n  ![](17.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $参数解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. -3.7：标注的x坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. 3：标注的y坐标\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. text：标注的内容，正则表达式\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. text的样式，是一个字典，可以有size，color等等\n  </font><br/>\n- <font size=5 face=\"黑体\"><b>tick能见度</b></font>\n  <font size=4 face=\"黑体\">\n  首先，我们画了一个这样的图像：\n  ![](18.png)<br/>\n  可以看到图像和坐标轴之间是有遮挡的，我们可以设置x，y的透明度来使得x，y轴清晰，遮挡没那么严重\n  ``` python\n  # 通过ax.get_xticklabels()和ax.get_yticklabels()来获取x，y坐标轴的标记\n  for label in ax.get_xticklabels() + ax.get_yticklabels():\n  \tlabel.set_fontsize(12) # 设置坐标轴标记的大小\n\tlabel.set_bbox(dict(facecolor='white', edgecolor='None', alpha=0.7, zorder=2)) # 设置坐标轴标记的bbox（透明度等属性）\n  ```\n  ![](19.png)<br/>\n  <font size=4 face=\"黑体\">\n  $ \\ \\ \\ \\ $set_bbox参数中的字典内容解释：\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $1. facecolor：前景色\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $2. edgecolor：边框颜色，这里是'None'，即无边框\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $3. alpha：透明度\n  $ \\ \\ \\ \\ \\ \\ \\ \\ $4. zorder：层叠顺序，默认zorder为1，这里设置为2，则可以显示在线段上面\n  </font><br/>\n  </font>","tags":["python","matplotlib"]},{"title":"神经网络基础学习","url":"/2019/03/12/神经网络基础学习/","content":"> 参考博客：[【深度学习】神经网络入门](https://blog.csdn.net/lyl771857509/article/details/78990215)\n\n- <font size=5 face=\"黑体\" ><b>人工神经网络登场的前景</b></font>\n  <font size=4 face=\"黑体\">\n    假设我们有0.14，0.57，01.29，3.57，5.14这5个点，那么第7个是多少？一眼看上去好像看不出来，假如画个图拟合一下，我们可以看到：<br/>\n\t![](1.png)<br/>\n\t这样我们可以清楚看到，下一个是7。但是，计算机并不会这样画线，所以需要拟合。\n\t这就是回归（曲线拟合）问题。\n\t从最简单的方法开始：<br/>\n\t![](2.png)<br/>\n\t我们初始化一条直线 y=kx+b,然后不断旋转平移调整它，直到它的误差达到最小或者小于某个值（如0.00001）便停止旋转。这就是<b>梯度下降法（Gradient Descent）</b>\n\t计算误差，我们用的是最小二乘法。到这里，好像就解决问题了，但是上面那仅仅适用于直线。所以我们需要更加普适的方法。\n\t我们知道，误差的计算：$误差=（直线点-样本点）^2$，那么，假如我们可以找到合适的参数使得误差最小，那么就是找到了答案。\n\t可以看到，误差的函数是二次函数：<br/>\n\t![](3.png)<br/>\n\t那么，我们知道，当这个函数值最小时候，导数最小，那么我们做一个切线，我们就不断旋转这个切线，找到最小的误差。<br/>\n\t![](4.png)<br/>\n\t其中，切线每次旋转的幅度就叫做<b>学习率（learning rate）</b>，求出的切线的斜率叫做<b>导数</b>，假如要求多个曲线的导数，那其中某个曲线的斜率就叫做<b>偏导数</b>\n\t这种方法存在的问题是会陷入局部最优解，如下图：<br/>\n\t![](5.png)<br/>\n\t而且，假如维度增加，那么特征数的增加是难以接受的。假如，有一张50\\*50的灰度图，那么这个图片的维度为50*50=2500，根据公式 $特征数=\\frac{维度^2}{2}$，我们可以知道，就这么一个小小的图片，特征数达到了上百万，这明显消耗太大。\n\t所以，就有了<b>神经网络</b>的登场。<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>神经网络中的单个神经元</b></font>\n  <font size=4 face=\"黑体\">\n    下图就是单个神经元的基本数学模型：<br/>\n\t![](6.png)<br/>\n\tX1，X2这些输入代表了初始特征，w0，w1这些代表了对应的权重，然后将特征加权求和：\n\t$ res = 1\\*w0 + X1\\*w1 + X2\\*w2 + X3\\*w3 $\n\t然后还可以看到下一步，将加权求和的结果送入激活函数，激活函数主要有以下几个：\n\t<ol>\n\t  <li><b>Purelin</b>：<font size=4>$y = x$</font></li>\n\t  <li><b>Sigmoid</b>：<font size=4>$y = logsig(x) = \\frac{1}{1+e^(-x)}$</font></li>\n\t  <li><b>Tansig </b>：<font size=4>$y = tansig(x) = \\frac{e^x - e^(-x)}{e^x + e^(-x)}$</font></li>\n\t</ol>\n\t后两个函数的图像如下：<br/>\n\t![](7.png)<br/>\n\t可以看到，logsig的范围为0 ~ 1，tansig的范围为-1 ~ 1<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>神经网络</b></font>\n  <font size=4 face=\"黑体\">\n    先上几张简单的神经网络的结构图：<br/>\n\t![](8.png)<br/>\n\t<ul>\n\t  <li> 左边蓝色的，是<b>输入层</b>\n\t  <li> 中间橙色的，是<b>隐藏层</b>，不管多少层，都是隐藏层\n\t  <li> 右边绿色的，是<b>输出层</b>\n\t</ul>\n\t在这些节点之间的连接线上，是有权重的，计算方法就是和前面一样的加权求和以及激活。\n\t从输入层通过计算传播到隐藏层，再到输出层，最后输出层的结果和样本值比较，得到误差，这个过程就叫做<b>前向传播</b>。\n\t但是，假如采用前面所述的梯度下降法，不断修改参数使得误差最小，那么，在神经网络中，需要修改每条连接线上的权重参数，这是不容易的。<br/>\n  </font>\n- <font size=5 face=\"黑体\"><b>BP神经网络</b></font>\n  <font size=4 face=\"黑体\">\n    BP反向传播算法的基本思想：利用前向传播最后输出的结果，计算得到误差。然后计算误差的偏导数，再和前面的隐藏层加权求和，如此一层层向后传递，最后到达输入层，用计算出来的偏导数来更新权重。\n\t为了和前向传播的误差区分，这里使用残差来表示误差的偏导数。\n\t残差的计算：\n\t<ol>\n\t  <li>输出层 -> 隐藏层：$ 残差 = -(输出值 - 样本值)\\*激活函数的导数 $</li>\n\t  <li>隐藏层 -> 隐藏层：$ 残差 = -(右层每个节点的残差加权求和)\\*激活函数的导数 $</li>\n\t</ol>\n\t对于这个激活函数的导数，对于以下几个我们常用的激活函数：\n\t<ol>\n\t  <li>Pureline函数：$ Pureline'(x) = 1 $</li>\n\t  <li>Sigmod函数：$ Sigmod'(x) = Sigmod(x)\\*(1 - Sigmod(x)) $</li>\n\t  <li>Tansig函数：$ tansig'(x) = 1 - tansig(x)^2 $</li>\n\t</ol>\n\t残差计算完之后，就可以更新权重了\n\t<ul>\n\t  <li>输入层：权重改变量 = 当前节点的激活函数值\\*右层对应节点的残差\\*学习率</li>\n\t  <li>隐藏层：权重改变量 = 输入值\\*右层节点的残差\\*学习率</li>\n\t  <li>偏移值：右层对应节点的残差\\*学习率</li>\n\t</ul>\n\t计算举例：\n\t![](example_1.png)\n\t![](example_2.png)\n\t![](example_3.png)\n\t![](example_4.png)\n\t![](example_5.png)\n\t![](example_6.png)\n\t![](example_7.png)\n  </font>","tags":["机器学习","人工智能","入门知识","数学相关"],"categories":["机器学习"]}]